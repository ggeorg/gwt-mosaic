#summary Data-aware widgets that work so far
#sidebar TableOfContents

This demo shows all the data-ware widgets that work so far, including a calculated field for the user's full name and a lookup relation for age by using [http://code.google.com/p/gwt-mosaic/source/browse/trunk/src/org/gwt/mosaic2g/db/client/ui/DBLookupListBox.java DBLookupListBox] and a simple `Integer` list as a store.

http://gwt-mosaic.googlecode.com/svn/wiki/2g/data-binding2.png

Demo:

Code:

{{{
import java.util.ArrayList;
import java.util.List;

import org.gwt.mosaic2g.binding.client.AbstractBinder;
import org.gwt.mosaic2g.db.client.Column;
import org.gwt.mosaic2g.db.client.DataRowDescriptor;
import org.gwt.mosaic2g.db.client.DataSource;
import org.gwt.mosaic2g.db.client.IntegerColumn;
import org.gwt.mosaic2g.db.client.ListStoreDataSet;
import org.gwt.mosaic2g.db.client.ListStoreProvider.DataFactory;
import org.gwt.mosaic2g.db.client.StringColumn;
import org.gwt.mosaic2g.db.client.ui.DBLabel;
import org.gwt.mosaic2g.db.client.ui.DBListBox;
import org.gwt.mosaic2g.db.client.ui.DBLookupListBox;
import org.gwt.mosaic2g.db.client.ui.DBTextBox;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.RootPanel;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Showcase implements EntryPoint {

	private int userId = 0;

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		final List<User> store = new ArrayList<User>();
		for (int i = 0; i < 100; i++) {
			User user = new User(++userId, "FirtsName #" + i, "LastName #" + i,
					20 + (int) (Math.random() * 50));
			store.add(user);
		}

		final ListStoreDataSet<User> dataSet = new ListStoreDataSet<User>(
				store, new DataFactory<User>() {
					@Override
					public User create() {
						return new User(++userId, null, null, 0);
					}
				});
		DataRowDescriptor<User> descr = dataSet.getDataRowDescriptor(); // descriptor

		Column<Integer> idC = new IntegerColumn("id",
				new AbstractBinder<Integer>() {
					@Override
					public Integer get() {
						if (dataSet.getOpen().$()) {
							return dataSet.getRowData().getId();
						}
						return null;
					}
				});
		descr.addColumn(idC);

		final Column<String> firstNameC = new StringColumn("firstName",
				new AbstractBinder<String>() {
					@Override
					public String get() {
						if (dataSet.getOpen().$()) {
							return dataSet.getRowData().getFirstName();
						}
						return null;
					}

					@Override
					public void set(String value) {
						if (dataSet.getOpen().$()) {
							dataSet.getRowData().setFirstName(value);
							fireValueChangeEvent(value);
						}
					}
				});
		descr.addColumn(firstNameC);

		final Column<String> lastNameC = new StringColumn("lastName",
				new AbstractBinder<String>() {
					@Override
					public String get() {
						if (dataSet.getOpen().$()) {
							return dataSet.getRowData().getLastName();
						}
						return null;
					}

					@Override
					public void set(String value) {
						if (dataSet.getOpen().$()) {
							dataSet.getRowData().setLastName(value);
							fireValueChangeEvent(value);
						}
					}
				});
		descr.addColumn(lastNameC);

		Column<Integer> ageC = new IntegerColumn("age",
				new AbstractBinder<Integer>() {
					@Override
					public Integer get() {
						if (dataSet.getOpen().$()) {
							return dataSet.getRowData().getAge();
						}
						return null;
					}

					@Override
					public void set(Integer value) {
						if (dataSet.getOpen().$()) {
							dataSet.getRowData().setAge(value);
							fireValueChangeEvent(value);
						}
					}
				});
		descr.addColumn(ageC);

		Column<String> nameC = new StringColumn("name",
				new AbstractBinder<String>() {
					@Override
					public String get() {
						if (dataSet.getOpen().$()) {
							return dataSet.getRowData().getFirstName() + " "
									+ dataSet.getRowData().getLastName();
						}
						return null;
					}

					@Override
					protected void init() {
						firstNameC
								.addValueChangeHandler(new ValueChangeHandler<String>() {
									@Override
									public void onValueChange(
											ValueChangeEvent<String> event) {
										fireValueChangeEvent();
									}
								});
						lastNameC
								.addValueChangeHandler(new ValueChangeHandler<String>() {
									@Override
									public void onValueChange(
											ValueChangeEvent<String> event) {
										fireValueChangeEvent();
									}
								});
					}

					private void fireValueChangeEvent() {
						fireValueChangeEvent(get());
					}
				});
		descr.addColumn(nameC);

		// ---

		List<Integer> ageStore = new ArrayList<Integer>();
		for (int i = 20; i <= 70; i++) {
			ageStore.add(i);
		}

		final ListStoreDataSet<Integer> lookupDataSet = new ListStoreDataSet<Integer>(
				ageStore, new DataFactory<Integer>() {
					@Override
					public Integer create() {
						return new Integer(0);
					}
				});
		DataRowDescriptor<Integer> lookupDescr = lookupDataSet
				.getDataRowDescriptor(); // descriptor

		Column<Integer> ageLookupC = new IntegerColumn("age",
				new AbstractBinder<Integer>() {
					@Override
					public Integer get() {
						if (lookupDataSet.getOpen().$()) {
							return lookupDataSet.getRowData().intValue();
						}
						return null;
					}
				});
		lookupDescr.addColumn(ageLookupC);

		// ---

		DataSource<User> dataSource = new DataSource<User>(dataSet);
		DataSource<Integer> lookupDataSource = new DataSource<Integer>(
				lookupDataSet);

		// ---

		DBListBox<User> listBox = new DBListBox<User>(dataSource, idC, nameC);
		listBox.setVisibleItemCount(1);

		DBListBox<User> listBox2 = new DBListBox<User>(dataSource, idC, nameC);
		listBox2.setVisibleItemCount(10);

		DBTextBox<User, String> firstNameTB = new DBTextBox<User, String>(
				dataSource, firstNameC);
		DBTextBox<User, String> lastNameTB = new DBTextBox<User, String>(
				dataSource, lastNameC);
		DBTextBox<User, Integer> ageTB = new DBTextBox<User, Integer>(
				dataSource, ageC);

		DBLookupListBox<User, Integer> ageLookupLB = new DBLookupListBox<User, Integer>(
				dataSource, ageC, lookupDataSource, ageLookupC, ageLookupC);
		
		DBLabel<User, String> nameL = new DBLabel<User, String>(dataSource, nameC);

		// ---

		dataSet.open();

		FlexTable table = new FlexTable();
		// table.setBorderWidth(1);

		table.setText(0, 0, "Data:");
		table.setWidget(0, 2, listBox2);
		table.setWidget(0, 3, listBox);

		table.setText(5, 0, "First Name:");
		table.setWidget(5, 2, firstNameTB);
		table.setWidget(5, 3, nameL);

		table.setText(6, 0, "Last Name:");
		table.setWidget(6, 2, lastNameTB);

		table.setText(7, 0, "Age (20-70):");
		table.setWidget(7, 2, ageTB);
		table.setWidget(7, 3, ageLookupLB);

		table.setWidget(10, 2, new Button("dump", new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				for (int i = 0; i < store.size(); i++) {
					System.out.println(store.get(i));
				}
			}
		}));

		RootPanel.get().add(table, 10, 10);
	}

}
}}}