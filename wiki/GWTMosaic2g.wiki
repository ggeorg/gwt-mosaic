#summary The 2nd Generation of GWT Mosaic framework designed as a GWT 2.1 extension.
#sidebar TableOfContents

= Introduction =

GWT Mosaic (2g) is built on top of a simple animation framework with support for maintaining a constant animation rate by dropping frames, rather slowing down the visual results.

The second generation of GWT Mosaic provides a full-featured 2D scene graph API based on [https://hdcookbook.dev.java.net/grin.html HD Cookbook GRIN Scene Graph]. Similar to GRIN the framework is designed to be extended with other presentation elements, including programmatic elements. The GWT Mosaic scene graph doesn't try to address the overall control of an application; that's left for the developer to do in code. The framework does provide a simple state machine and timeline that might help structure application control.

= Details =

An application can be structured like this:

{{{
public class Application implements EntryPoint {
	private Scene scene;

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		RootLayoutPanel.get().add(scene = new Scene());
		scene.setShow(createShow());
		AnimationEngine animationEngine = new AnimationEngine(
				new AnimationClient[] { scene });
                animationEngine.setFrameMillis(40); // 25fps
		animationEngine.start();
	}

	private Show createShow() {
		final Show show = new Show();
	    ...
	}
}
}}}

== Show ==

The center of GWT Mosaic's scene graph is called a *Show*. The main function of a show is to display a *Feature*. A feature is something that presents something sensory to the user, like an image, text or maybe sound and video in future.

A set of features that are presented together (at the same time) are collected into a *Segment*.

A show doesn't provide any real control logic or application state; that's left to the developer. 

A show can:

 * Move from any segment to any other segment.
 * Manage initialization, e.g. loading images.
 * Automatically move to another segment e.g. when an animation within the segment finishes.