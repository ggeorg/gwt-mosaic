#summary Sample application using Application module, PageBus and GWT Beans Binding framework.

= Introduction =

The application we want to build is the Contacts application from [http://code.google.com/webtoolkit/doc/latest/tutorial/mvp-architecture.html Large scale application development and MVP]. Focus again is turned to decouple the view from the logic.

This application will allow users to view, edit, and add contacts to a list of contacts that are stored on the server:

= Details =

The application structure in eclipse is:

http://gwt-mosaic.googlecode.com/svn/wiki/contacts-structure.png

The [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contact.java Contact] and [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactDetails.java ContactDetails] classes is our *Model*:

 * [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contact.java Contact] class represents a contact within the contact list.
 * [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactDetails.java ContactDetails] is a light version of [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contact.java Contact] that will make the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contact.java Contact] list retrieval more efficient.

Both model classes in our application extend [http://code.google.com/p/gwt-beans-binding/source/browse/trunk/src/org/gwt/beansbinding/core/client/util/AbstractBean.java AbstractBean] and fire [http://code.google.com/p/gwtx/source/browse/trunk/src/main/java/com/googlecode/gwtx/java/beans/emul/java/beans/PropertyChangeEvent.java PropertyChangeEvent]s. This feature is required by the GWT Beans Binding framework.

The classes in the {{{org.gwt.mosaic.client.ui}}} package is our *View*.

 * [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsView.java ContactsView] is used to show a list of all contacts http://gwt-mosaic.googlecode.com/svn/wiki/contacts.png
 * [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/EditContact.java EditContact] is used to add new contacts as well as editing existing contacts http://gwt-mosaic.googlecode.com/svn/wiki/contacts-edit.png

The view classes are totally decoupled and communicate with the rest of the application with messages. They don't have to implement any specific interface, and if created with {{{GWT create}}} the view classes can be switch-able.

The [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsController.java ContactsController] contains all the logic for our Contacts application. This class does not include any GWT UI elements and allows a non-GWTTestCase to be useful.

== Contacts {{{EntryPoint}}} class ==

The [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contacts.java Contacts] class is the application {{{EntryPoint}}} class. The [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contacts.java Contacts] class:

 # extends [http://code.google.com/p/gwt-mosaic/source/browse/branches/GWT-2.0/src/org/gwt/mosaic/application/client/SingleFrameApplication.java SingleFrameApplication]
 # calls {{{Application launch}}} in {{{onModuleLoad}}} to initialize the application framework 
 # overrides the {{{initialize}}} method to initialize:
  # the [http://code.google.com/p/gwt-beans-binding/ GWT Beans Binding] framework with the adapters we are going to use ([http://code.google.com/p/gwt-beans-binding/source/browse/trunk/src/org/gwt/beansbinding/ui/client/adapters/HasValueAdapterProvider.java HasValueAdapterProvider] and [http://code.google.com/p/gwt-mosaic/source/browse/branches/GWT-2.0/src/org/gwt/mosaic/beansbinding/client/adapters/ListBoxAdapterProvider.java ListBoxAdapterProvider])
  # all application controllers, in our application only [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsController.java ContactsController]
  # a [http://developer.tibco.com/pagebus/default.jsp PageBus] subscriber to selection events fired by the contacts view class
 # calls {{{show}}} in {{{startup}}} method
 # defines all [http://code.google.com/p/gwt-mosaic/source/browse/branches/GWT-2.0/src/org/gwt/mosaic/actions/client/Action.java Action]s used in the Contacts application

=== Contacts Application @CmdAction definitions ===

The @CmdAction definitions are:

 * {{{showContactsView}}} used to switch into the contacts list view
 * {{{showEditContact}}} used to switch into the contact edit view
 * {{{doAddContact}}} used to add a new contact into the contacts list
 * {{{doEditContact}}} used to edit the selected contact
 * {{{doDeleteContacts}}} used to delete the selected contacts
 * {{{doSaveContact}}} used to save the currently added or updated contact
 * {{{doCancelEditContact}}} used to close the add/edit contact form

The first two @CmdAction definitions are related to {{{History}}}, see [ContactsApplication#History_and_view_transitions History and view transitions] below.

The {{{doAddContact}}} @CmdAction forwards the action to the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsController.java ContactsController].

The {{{doEditContact}}} @CmdAction queries the [http://developer.tibco.com/pagebus/default.jsp PageBus] store for selected items and forwards the action to the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsController.java ContactsController]. The {{{doEditContact}}} @CmdAction is using {{{enabledProperty = "singleSelection"}}} in the definition. This extra @CmdAction property specifies that the {{{enabled}}} state of the action depends on the value of the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contacts.java Contacts] {{{singleSelection}}} property.

The {{{doDeleteContacts}}} @CmdAction like {{{doEditContact}}} queries the [http://developer.tibco.com/pagebus/default.jsp PageBus] store for selected items and forwards the action to the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsController.java ContactsController]. The {{{doDeleteContacts}}} @CmdAction is using {{{enabledProperty = "itemsSelected"}}}. This extra @CmdAction property specifies that the {{{enabled}}} state of the action depends on the value of the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contacts.java Contacts] {{{itemsSelected}}} property.

Both {{{singleSelection}}} and {{{itemsSelected}}} properties are updated by:

{{{
  @Override
  protected void initialize() {
...
    // Subject: CONTACTS_SELECTION
    PageBus.subscribe(PageBusSubjects.CONTACTS_STORE_SELECTION,
        new SubscriberCallback() {
          @SuppressWarnings("unchecked")
          public void onMessage(String subject, Object message,
              Object subscriberData) {
            onSelectionChanged((List<ContactDetails>) message);
          }
        });
...
  }

  protected void onSelectionChanged(List<ContactDetails> selection) {
    setItemsSelected(selection != null && selection.size() > 0);
    setSingleSelection(selection != null && selection.size() == 1);
  }
}}}

The {{{doSaveContact}}} @CmdAction queries the [http://developer.tibco.com/pagebus/default.jsp PageBus] store to get the current [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contact.java Contact] instance we use in the edit contact view and forwards the action to [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsController.java ContactsController].

The {{{doCancelEditContact}}} @CmdAction hides the edit contact view and shows the {{{ContactsView}}} panel.

=== History and view transitions ===

Similar to [http://code.google.com/webtoolkit/doc/latest/tutorial/mvp-architecture.html#history Large scale application development and MVP] the {{{SingleFrameApplication}}} is able to handle flow transitions for each view class that implements the:

{{{
package org.gwt.mosaic.application.client;

public interface HasHistoryToken {
  String getHistoryToken();
}
}}}

interface. In our application, both, {{{ContactsView}}} and {{{EditContact}}} implement this interface.

We initialize the history token in {{{startup}}} method:

{{{
  @Override
  protected void startup() {
    show(ContactsView.get().getHistoryToken());
  }
}}}

{{{SingleFrameApplication}}} is using the {{{ApplicationContext getActionMap}}} to find {{{Action}}}s with a name equal to the history token and calls its {{{actionPerformed}}} method. Those {{{Action}}}s in the Contacts applications are the {{{Action}}}s defined with {{{@CmdAction(name = "ContactsView")}}} and {{{@CmdAction(name = "EditContact")}}}.

== The View classes ==

The view classes ([http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsView.java ContactsView] and [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/EditContact.java EditContact]) do not have to implement any application specific interface or to extend any application specific class. The view classes are using {{{Action}}}s or [http://developer.tibco.com/pagebus/default.jsp PageBus] to interact with the other building blocks of the application. The missing of direct coupling with the other parts of the application allows us to switch out the views without having to change anu of the surrounding application code.

=== Binding with {{{Action}}}s ===

In [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsView.java ContactsView], the lines:

{{{
private ContactsView() {
...
    final ToolBar toolBar = new ToolBar();
    toolBar.add(ApplicationFramework.newToolButton("doAddContact"));
    toolBar.add(ApplicationFramework.newToolButton("doEditContact"));
    toolBar.addSeparator();
    toolBar.add(ApplicationFramework.newToolButton("doDeleteContacts"));
    layoutPanel.add(toolBar, new BoxLayoutData(FillStyle.HORIZONTAL));
...
}
}}}

show the use of {{{ApplicationFramework}}}'s static helpers methods to construct the {{{ToolButton}}}s for the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsView.java ContactsView] {{{ToolBar}}}. The {{{ToolButton}}}s constructed with {{{newToolButton}}} are bound to the given (by name) {{{Action}}}. Each time you click on those buttons the relevant [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contacts.java Contacts] {{{@CmdAction}}} method is called.

In [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/EditContact.java EditContact], the lines:

{{{
  private EditContact() {
...
    builder.append(ButtonBarFactory.buildRightAlignedBar(
        ApplicationFramework.newButton("doSaveContact"),
        ApplicationFramework.newButton("doCancelEditContact")), 3);
...
  }
}}}

show the use of {{{ApplicationFramework newButton}}} method, to construct the form's "Save" and "Cancel" buttons. Those buttons once clicked will invoke the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contacts.java Contacts] {{{doSaveContact}}} and {{{doCancelEditContact}}} methods, respectively.

The {{{ToolButton}}}'s (and {{{Button}}}'s) localized text, tooltip and image is taken from the resources defined by the equivalent {{{@CmdAction}}} definition.

The {{{Action actionPerformed}}} method can be called directly, if needed. This is the case in the double click handler of the contacts list:

{{{
 private ContactsView() {
...
    contactsTable.addDoubleClickHandler(new DoubleClickHandler() {
      public void onDoubleClick(DoubleClickEvent event) {
        invokeAction("doEditContact");
      }
    });
  }

  private void invokeAction(String actionName) {
    final Action action = Application.getInstance().getContext().getActionMap().get(
        actionName);
    if (action != null) {
      action.actionPerformed(new ActionEvent(action, this));
    }
  }
}}}

=== Using PageBus in Views ===

Views can sink or emit [http://developer.tibco.com/pagebus/default.jsp PageBus] events.[http://developer.tibco.com/pagebus/default.jsp PageBus] is an event bus implemented in JavaScript that enables gadgets and other Ajax components in a Web page to broadcast and listen for messages published on topic names. [http://developer.tibco.com/pagebus/default.jsp PageBus] topic names are hierarchical and support wildcards, allowing widgets to listen for both general as well as specific information. It also allows components to share information using the {{{store}}} and {{{query}}} methods (see [http://69.20.122.77/gwt-mosaic/Showcase.html#CwPageBus2 demo]).

In [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsView.java ContactsView], we use:

 * {{{PageBus store}}} to store our selection

{{{
    contactsTable.addRowSelectionHandler(new RowSelectionHandler() {
      public void onRowSelection(RowSelectionEvent event) {
        Set<Integer> selectedIndices = contactsTable.getSelectedIndices();
        ArrayList<ContactDetails> selectedItems = new ArrayList<ContactDetails>();
        if (selectedIndices != null && selectedIndices.size() > 0) {
          for (Integer index : selectedIndices) {
            selectedItems.add(contactsTable.getItem(index));
          }
        }
        PageBus.store(PageBusSubjects.CONTACTS_STORE_SELECTION, selectedItems);
      }
    });
}}}

 * {{{PageBus publish}}} to notify that we want the contacts manager (in our case [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsController.java ContactsController]) to fetch a list of contacts:

{{{
  private void fetchContactDetails() {
    PageBus.publish(PageBusSubjects.CONTACTS_MANAGEMENT_FETCH, null);
  }
}}}

 * {{{PageBus subscribe}}} to get notified if the list of contacts has changed:

{{{
  private void bind() {
    // Subject: CONTACTS_STORE
    contactsStoreSubscription = PageBus.subscribe(
        PageBusSubjects.CONTACTS_STORE, new SubscriberCallback() {
          public void onMessage(String subject, Object message,
              Object subscriberData) {
            getContactDetailsData();
          }
        });
  }
}}}

In [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/EditContact.java EditContact], we use:

 * {{{PageBus query}}} to query the {{{PageBusSubjects.CONTACTS_STORE_CURRENT}}} to get the {{{Contact}}} instance we want to edit:

{{{
  private void bind() {
    // Subject: CONTACTS_STORE_CURRENT
    PageBus.query(PageBusSubjects.CONTACTS_STORE_CURRENT, new QueryCallback() {
      public boolean onResult(String subject, Object value, Object data) {
        bindContactToUI((Contact) value);        
        return false;
      }
    });
  }
}}}

== The Application Controller(s) ==

[http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsController.java ContactsController] contains all of the logic for our Contacts application. 

The controller:

 * provides an API for the {{{Application}}} ({{{EntryPoint}}}) class
 * is also a sink and source for [http://developer.tibco.com/pagebus/default.jsp PageBus] events
 * contains all the RPC calls

== The use of GWT Beans Binding in Contacts application ==

The [http://code.google.com/p/gwt-beans-binding/ GWT Beans Binding] framework is is a library for implementing property binding with Java objects. It is used internally by GWT Mosaic's {{{Action}}}s implementation. GWT Beans Binding is used also by the Application module for the {{{@CmdAction}}}'s {{{enabledProperty}}} and {{{selectedProperty}}} properties:

{{{
public @interface CmdAction {
...

  String enabledProperty() default "";

  String selectedProperty() default "";
}
}}}

We have already used the {{{enabledProperty}}} in the definitions of {{{doEditContact}}} and {{{doDeleteContacts}}} {{{@CmdAction}}}s:

{{{
  @CmdAction(description = "doEditContactShortDescription", image = "form_edit_action", enabledProperty = "singleSelection")
  public void doEditContact() {
    ...
  }

  @CmdAction(description = "doDeleteContactsShortDescription", image = "form_delete_action", enabledProperty = "itemsSelected")
  public void doDeleteContacts() {
    ...
  }
}}}

Those properties synchronize the {{{Action}}}s with [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contacts.java Contacts]

{{{
  private boolean itemsSelected = false, singleSelection = false;
}}}

properties.

[http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/ContactsView.java ContactsView] is using GWT Beans Binding to bind the UI ({{{ListBox<ContactDetails>}}}) with the data ({{{java.util.List<ContactDetails>}}}) in:

{{{
  protected void getContactDetailsData() {

    if (bindingGroup != null) {
      bindingGroup.unbind();
    }
    bindingGroup = new BindingGroup();

    PageBus.query(PageBusSubjects.CONTACTS_STORE, new QueryCallback() {
      @SuppressWarnings("unchecked")
      public boolean onResult(String subject, Object value, Object data) {
        if (value != null && value instanceof List<?>) {
          List<ContactDetails> list = ObservableCollections.observableList((List<ContactDetails>) value);

          // create the binding from List to ListBox
          final ListBoxBinding<ContactDetails, List<ContactDetails>, ListBox<ContactDetails>> listBoxBinding = GWTMosaicBindings.createListBoxBinding(
              UpdateStrategy.READ, list, contactsTable);

          BeanProperty<ContactDetails, String> idP = BeanProperty.<ContactDetails, String> create("id");
          BeanProperty<ContactDetails, String> nameP = BeanProperty.<ContactDetails, String> create("displayName");

          // add columns bindings to the ListBoxBinding
          listBoxBinding.addColumnBinding(idP).setColumnName("Id");
          listBoxBinding.addColumnBinding(nameP).setColumnName("Name");

          bindingGroup.addBinding(listBoxBinding);
          bindingGroup.bind();

          contactsTable.setColumnWidth(0, DOM.toPixelSize("8em", true));
          contactsTable.layout();
        }
        return false;
      }
    });
  }
}}}

[http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/EditContact.java EditContact] is using GWT Beans Binding to bind the form UI elements with the [http://code.google.com/p/gwt-mosaic/source/browse/wiki/ContactsApplication/Contact.java Contact] object:

{{{
  private void bindContactToUI(Contact contact) {
    BeanProperty<HasValue<String>, String> valueP = BeanProperty.create("value");

    Binding<Contact, String, HasValue<String>, String> firstNameB = Bindings.createAutoBinding(
        UpdateStrategy.READ_WRITE, contact,
        BeanProperty.<Contact, String> create("firstName"), firstName,
        valueP);

    Binding<Contact, String, HasValue<String>, String> lastNameB = Bindings.createAutoBinding(
        UpdateStrategy.READ_WRITE, contact,
        BeanProperty.<Contact, String> create("lastName"), lastName, valueP);

    Binding<Contact, String, HasValue<String>, String> emailAddressB = Bindings.createAutoBinding(
        UpdateStrategy.READ_WRITE, contact,
        BeanProperty.<Contact, String> create("emailAddress"),
        emailAddress, valueP);

    bindingGroup.addBinding(firstNameB);
    bindingGroup.addBinding(lastNameB);
    bindingGroup.addBinding(emailAddressB);
    
    bindingGroup.bind();
  }
}}}

By using GWT Beans Binding, adding basic form validation is trivial, see: http://code.google.com/p/gwt-beans-binding/wiki/MoreIntroduction