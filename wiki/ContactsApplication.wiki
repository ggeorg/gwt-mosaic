#summary Sample application using Application module and PageBus.

= Introduction =

The application we want to build is the Contacts application from [http://code.google.com/webtoolkit/doc/latest/tutorial/mvp-architecture.html Large scale application development and MVP]. Focus again is turned to decouple the view from the logic.

This application will allow users to view, edit, and add contacts to a list of contacts that are stored on the server.

http://gwt-mosaic.googlecode.com/svn/wiki/contacts.png

= Details =

The application structure in eclipse is:

http://gwt-mosaic.googlecode.com/svn/wiki/contacts-structure.png

The {{{Contact}}} and {{{ContactDetails}}} classes is our *Model*:

 * {{{Contact}}} class represents a contact within the contact list.
 * {{{ContactDetails}}} is a light version of {{{Contact}}} that will make the {{{Contact}}} list retrieval more efficient.

Both model classes in our application extend the {{{AbstractBean}}} and fire {{{PropertyChange}}} events. This feature is required by the GWT Beans Binding framework.

For example, bellow you'll see the {{{ContactDetails}}} class:

{{{
import java.io.Serializable;

import org.gwt.beansbinding.core.client.util.AbstractBean;

@SuppressWarnings("serial")
public class ContactDetails extends AbstractBean implements Serializable {
	private String id;
	private String displayName;

	public ContactDetails() {
		this("0", "");
	}

	public ContactDetails(String id, String displayName) {
		super();
		this.id = id;
		this.displayName = displayName;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		String oldValue = this.id;
		this.id = id;
		firePropertyChange("id", oldValue, this.id);
	}

	public String getDisplayName() {
		return displayName;
	}

	public void setDisplayName(String displayName) {
		String oldValue = displayName;
		this.displayName = displayName;
		firePropertyChange("displayName", oldValue, this.displayName);
	}
}
}}}

The classes in the {{{org.gwt.mosaic.client.ui}}} package is our *View*.

 * {{{ContactsView}}} is used to show a list of all contacts
 * {{{EditContact}}} is used to add new contacts as well as editing existing contacts

The view classes are totally decoupled and communicate with the rest of the application with messages. They don't have to implement any specific interface, and if created with {{{GWT create}}} the view classes can be switch-able.

The {{{ContactsController}}} contains all the logic for our Contacts application. This class does not include any GWT UI elements and allows a non-GWTTestCase to be useful.

== Contacts {{{EntryPoint}}} class ==

The {{{Contacts}}} class is the application {{{EntryPoint}}} class. This class:

 # extends the {{{SingleFrameApplication}}} class
 # calls {{{Application launch}}} in {{{onModuleLoad}}} to initialize the application framework 
 # overrides the {{{initialize}}} method to initialize:
  # the GWT Beans Binding framework with the adapters we are going to use ({{{HasValueAdapterProvider}}} and {{{ListBoxAdapterProvider}}})
  # all application controllers, in our application only {{{ContactsController}}}
  # a PageBus subscriber to selection events fired by the contacts view class
 # calls {{{show}}} in {{{startup}}} method
 # defines all {{{Action}}}s used in the Contacts application

{{{
package org.gwt.mosaic.contacts.client;

import java.util.List;

import org.gwt.beansbinding.core.client.ext.BeanAdapterFactory;
import org.gwt.beansbinding.ui.client.adapters.HasValueAdapterProvider;
import org.gwt.mosaic.application.client.Application;
import org.gwt.mosaic.application.client.ApplicationClientBundle;
import org.gwt.mosaic.application.client.ApplicationConstants;
import org.gwt.mosaic.application.client.ApplicationResources;
import org.gwt.mosaic.application.client.CmdAction;
import org.gwt.mosaic.application.client.SingleFrameApplication;
import org.gwt.mosaic.beansbinding.client.adapters.ListBoxAdapterProvider;
import org.gwt.mosaic.contacts.client.controller.ContactsController;
import org.gwt.mosaic.contacts.client.ui.ContactsView;
import org.gwt.mosaic.contacts.client.ui.EditContact;
import org.gwt.mosaic.contacts.shared.Contact;
import org.gwt.mosaic.contacts.shared.ContactDetails;
import org.gwt.mosaic.pagebus.client.PageBus;
import org.gwt.mosaic.pagebus.client.QueryCallback;
import org.gwt.mosaic.pagebus.client.SubscriberCallback;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Contacts extends SingleFrameApplication implements EntryPoint {
  private static final ContactsServiceAsync rpcService = GWT.create(ContactsService.class);

  private boolean itemsSelected = false, singleSelection = false;

  private ContactsController contactsCtrl;

  public void onModuleLoad() {
    Application.launch(this, new ApplicationResources() {
      final ContactsConstants constants = GWT.create(ContactsConstants.class);
      final ContactsClientBundle clientBundle = GWT.create(ContactsClientBundle.class);

      public ApplicationConstants getConstants() {
        return constants;
      }

      public ApplicationClientBundle getClientBundle() {
        return clientBundle;
      }
    });
  }

  @Override
  protected void initialize() {

    // Register all Adapters used in code.
    BeanAdapterFactory.addProvider(new HasValueAdapterProvider<String>());
    BeanAdapterFactory.addProvider(new ListBoxAdapterProvider());

    // Initialize all controllers
    contactsCtrl = new ContactsController(rpcService);

    // Subject: CONTACTS_SELECTION
    PageBus.subscribe(PageBusSubjects.CONTACTS_STORE_SELECTION,
        new SubscriberCallback() {
          @SuppressWarnings("unchecked")
          public void onMessage(String subject, Object message,
              Object subscriberData) {
            onSelectionChanged((List<ContactDetails>) message);
          }
        });

  }

  @Override
  protected void startup() {
    show(ContactsView.get().getHistoryToken());
  }

  // Getters & Setters -----------------------------------------------------

  /**
   * @return the itemsSelected
   */
  public boolean isItemsSelected() {
    return itemsSelected;
  }

  /**
   * @param itemsSelected the itemsSelected to set
   */
  public void setItemsSelected(boolean itemsSelected) {
    Boolean oldValue = this.itemsSelected;
    this.itemsSelected = itemsSelected;
    firePropertyChange("itemsSelected", oldValue, this.itemsSelected);
  }

  /**
   * @return the singleSelection
   */
  public boolean isSingleSelection() {
    return singleSelection;
  }

  /**
   * @param singleSelection the singleSelection to set
   */
  public void setSingleSelection(boolean singleSelection) {
    Boolean oldValue = this.singleSelection;
    this.singleSelection = singleSelection;
    firePropertyChange("singleSelection", oldValue, this.singleSelection);
  }

  /**
   * @return the contactsCtrl
   */
  public ContactsController getContactsCtrl() {
    return contactsCtrl;
  }

  // Command Actions -----------------------------------------------------

  @CmdAction(name = "ContactsView")
  public void showContactsView() {
    show(ContactsView.get(), true);
  }

  @CmdAction(name = "EditContact")
  public void showEditContact() {
    show(EditContact.get(), true);
  }

  @CmdAction(description = "doAddContactShortDescription", image = "form_add_action")
  public void doAddContact() {
    getContactsCtrl().doAddContact();
  }

  @CmdAction(description = "doEditContactShortDescription", image = "form_edit_action", enabledProperty = "singleSelection")
  public void doEditContact() {
    PageBus.query(PageBusSubjects.CONTACTS_STORE_SELECTION,
        new QueryCallback() {
          @SuppressWarnings("unchecked")
          public boolean onResult(String subject, Object value, Object data) {
            if (value != null && value instanceof List<?>) {
              getContactsCtrl().editSelectedContact(
                  ((List<ContactDetails>) value).get(0));
            }
            return false;
          }
        });
  }

  @CmdAction(description = "doDeleteContactsShortDescription", image = "form_delete_action", enabledProperty = "itemsSelected")
  public void doDeleteContacts() {
    PageBus.query(PageBusSubjects.CONTACTS_STORE_SELECTION,
        new QueryCallback() {
          @SuppressWarnings("unchecked")
          public boolean onResult(String subject, Object value, Object data) {
            if (value != null && value instanceof List<?>) {
              getContactsCtrl().deleteSelectedContacts(
                  (List<ContactDetails>) value);
            }
            return false;
          }
        });
  }

  @CmdAction
  public void doSaveContact() {
    PageBus.query(PageBusSubjects.CONTACTS_STORE_CURRENT, new QueryCallback() {
      public boolean onResult(String subject, Object value, Object data) {
        if (value != null && value instanceof Contact) {
          getContactsCtrl().saveContact((Contact) value);
        }
        return false;
      }
    });
  }

  @CmdAction
  public void doCancelEditContact() {
    show(ContactsView.get(), true);
  }

  // -----------------------------------------------------------------------

  protected void onSelectionChanged(List<ContactDetails> selection) {
    setItemsSelected(selection != null && selection.size() > 0);
    setSingleSelection(selection != null && selection.size() == 1);
  }
}
}}}

=== Contacts Application {{{@CmdAction}}} definitions ===

The {{{@CmdAction}}} definitions are:

 * {{{showContactsView}}} used to switch into the contacts list view
 * {{{showEditContact}}} used to switch into the contact edit view
 * {{{doAddContact}}} used to add a new contact into the contacts list
 * {{{doEditContact}}} used to edit the selected contact
 * {{{doDeleteContacts}}} used to delete the selected contacts
 * {{{doSaveContact}}} used to save the currently added or updated contact
 * {{{doCancelEditContact}}} used to close the add/edit contact form

The first two {{{@CmdAction}}} definitions are related to {{{History}}}.

The {{{doAddContact}}} {{{@CmdAction}}} forwards the action to the {{{ContactsController}}}.

The {{{doEditContact}}} {{{@CmdAction}}} queries the PageBus store for selected items and forwards the action to the {{{ContactsController}}}. The {{{doEditContact}}} {{{@CmdAction}}} is using {{{enabledProperty = "singleSelection"}}} in the definition. This extra {{{@CmdAction}}} property specifies that the {{{enabled}}} state of the action depends on the value of the {{{Contacts singleSelection}}} property.

The {{{doDeleteContacts}}} {{@CmdAction}}} like {{{doEditContact}}} queries the PageBus store for selected items and forwards the action to the {{{ContactsController}}}. The {{{doDeleteContacts}}} {{{@CmdAction}}} is using {{{enabledProperty = "itemsSelected"}}}. This extra {{{@CmdAction}}} property specifies that the {{{enabled}}} state of the action depends on the value of the {{{Contacts itemsSelected}}} property.

Both {{{singleSelection}}} and {{{itemsSelected}}} properties are updated by:

{{{
  @Override
  protected void initialize() {
...
    // Subject: CONTACTS_SELECTION
    PageBus.subscribe(PageBusSubjects.CONTACTS_STORE_SELECTION,
        new SubscriberCallback() {
          @SuppressWarnings("unchecked")
          public void onMessage(String subject, Object message,
              Object subscriberData) {
            onSelectionChanged((List<ContactDetails>) message);
          }
        });
...
  }

  protected void onSelectionChanged(List<ContactDetails> selection) {
    setItemsSelected(selection != null && selection.size() > 0);
    setSingleSelection(selection != null && selection.size() == 1);
  }
}}}