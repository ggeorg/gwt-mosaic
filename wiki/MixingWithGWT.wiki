#summary Mixing GWT widgets (panels) with GWT Mosaic widgets.

= Introduction =

GWT Mosaic is using a layout system based on absolute positioning. Like Java Swing, GWT Mosaic is using Layout Managers to layout widgets in a container widget called LayoutPanel. Such a layout system relays on a cascading layout process. This is a very important concept for building complex application layouts, it allows nested layout structures, as you can layout a top level container, and the child containers will have a chance to adjust their layouts as well.

GWT Panels are not designed to be part of a layout cascading process. This makes mixing of GWT widgets and GWT Mosaic widgets a not very trivial job. GWT Mosaic provides an interface (HasLayoutManager) that panels have to implement so that they can be part of the layout cascade process. This interace can be used to build widgets that can act as adaptors between GWT widgets and GWT Mosaic widgets. Such an adaptor widget is the Viewport widget.

= Details =

== Adding GWT Widgets to GWT Mosaic panels ==

All GWT Mosaic panels are based on LayoutPanel. LayoutPanel is using a layout manager to determine the location and size of widgets placed into. A layout manager is an object that implements the LayoutManager interface. Although widgets can provide size and alignment hints, a LayoutPanel's layout manager has the final say on the size and position of the widgets within the LayoutPanel.

Widgets are automatically laid out when they are attached to the DOM, this makes it easy to get almost all widgets to render without any issues.

=== Example 1 ===

|| http://gwt-mosaic.googlecode.com/svn/wiki/mix01.png || {{{

  public void onModuleLoad() {
    Viewport viewport = new Viewport();
    
    HorizontalSplitPanel hSplit = new HorizontalSplitPanel();
    hSplit.ensureDebugId("cwHorizontalSplitPanel");
    hSplit.setSize("500px", "350px");
    hSplit.setSplitPosition("30%");

    hSplit.setRightWidget(new HTML("<b>Right</b>"));
    hSplit.setLeftWidget(new HTML("<b>Left</b>"));
    
    viewport.getLayoutPanel().add(hSplit);
    
    viewport.attach();
  }

}}} ||
