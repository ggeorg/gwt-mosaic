#sidebar TableOfContents

= Introduction =

The group or structural features don't show anything themselves, but they allow the nodes of a scene graph to be put together in useful ways.

= Details =

The provided group features are:
  * [Groups#Group Group]
  * [Groups#Assembly Assembly]
  * [Groups#Container Container]

== Group ==

A [http://code.google.com/p/gwt-mosaic/source/browse/trunk/src/org/gwt/mosaic2g/client/scene/Group.java Group] is just a list of child nodes. When a group is made visible, all ofits child nodes will be visible.

Example:

<wiki:gadget url="http://mosaic.arkasoft.com/gwt-mosaic-fade-wiki.xml?v=2" height="256" width="512" border="0"/>

Code:

{{{
import org.gwt.mosaic2g.client.animator.AnimationClient;
import org.gwt.mosaic2g.client.animator.AnimationEngine;
import org.gwt.mosaic2g.client.scene.Fade;
import org.gwt.mosaic2g.client.scene.GrinFile;
import org.gwt.mosaic2g.client.scene.Group;
import org.gwt.mosaic2g.client.scene.InterpolatedModelParser;
import org.gwt.mosaic2g.client.scene.Scene;
import org.gwt.mosaic2g.client.scene.Segment;
import org.gwt.mosaic2g.client.scene.Show;
import org.gwt.mosaic2g.client.scene.control.Box;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.ui.RootLayoutPanel;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Showcase implements EntryPoint {
	private final Scene scene = new Scene();

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		// Specify a GWT panel (here RootLayoutPanel) to render our scene graph.
		// Within the panel we add the scene. A scene is a top level area where
		// you can set the root node of a scene graph, which is always a show
		// node.
		RootLayoutPanel.get().add(scene);
		scene.setShow(createShow());

		// Create an AnimationEngine instance with all AnimationClient(s) it has
		// to manage (Scene implements the AnimationClient interface).
		final AnimationEngine animationEngine = new AnimationEngine(
				new AnimationClient[] { scene });
		// Start the animation engine.
		animationEngine.start();
	}

	private Show createShow() {
		Show show = new Show();

		Box box1 = new Box(show, 20, 20, 100, 100);
		box1.setBackground("orange");
		box1.setBorder("5px solid red");

		Box box2 = new Box(show, 100, 100, 50, 50);
		box2.setBackground("yellow");
		box2.setBorder("5px solid green");

		Box box3 = new Box(show, 135, 135, 25, 25);
		box3.setBackground("cyan");
		box3.setBorder("5px solid blue");

		Group group = new Group(show);
		group.add(box1);
		group.add(box2);
		group.add(box3);

		Fade fade = new Fade(show, MyFadeModel.INSTANCE.createModel());
		fade.setPart(group);

		Segment segment = new Segment(show);
		segment.add(fade);

		show.activateSegment(segment);

		return show;
	}

	@GrinFile(value = "fade_model.txt")
	interface MyFadeModel extends InterpolatedModelParser {
		MyFadeModel INSTANCE = GWT.create(MyFadeModel.class);
	};
}
}}}

== Assembly ==

An [http://code.google.com/p/gwt-mosaic/source/browse/trunk/src/org/gwt/mosaic2g/client/scene/Assembly.java Assembly] is a little bit like a visual "switch" statement. An assembly has a number of child nodes, but only one of the children is active at any one time. Using an assembly, you can switch out what is visible on the screen. Assemblies let you manage the state of the user interface in a purely declerative way.

Example:

<wiki:gadget url="http://mosaic.arkasoft.com/gwt-mosaic-assembly-wiki.xml?v=3" height="256" width="512" border="0"/>

Code:

{{{
import org.gwt.mosaic2g.client.animator.AnimationClient;
import org.gwt.mosaic2g.client.animator.AnimationEngine;
import org.gwt.mosaic2g.client.scene.Assembly;
import org.gwt.mosaic2g.client.scene.Feature;
import org.gwt.mosaic2g.client.scene.GrinFile;
import org.gwt.mosaic2g.client.scene.InterpolatedModelParser;
import org.gwt.mosaic2g.client.scene.Scene;
import org.gwt.mosaic2g.client.scene.Segment;
import org.gwt.mosaic2g.client.scene.Show;
import org.gwt.mosaic2g.client.scene.Timer;
import org.gwt.mosaic2g.client.scene.Translator;
import org.gwt.mosaic2g.client.scene.control.Box;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.Command;
import com.google.gwt.user.client.DeferredCommand;
import com.google.gwt.user.client.ui.RootLayoutPanel;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Showcase implements EntryPoint {
	private Scene scene;

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		RootLayoutPanel.get().add(scene = new Scene());
		scene.setShow(createShow());

		final AnimationEngine animationEngine = new AnimationEngine(
				new AnimationClient[] { scene });
		DeferredCommand.addCommand(new Command() {
			public void execute() {
				animationEngine.start();
			}
		});
	}

	private Show createShow() {
		Show show = new Show();

		final Box red = new Box(show, 20, 20, 50, 50);
		red.setBackground("orange");
		red.setBorder("5px solid red");

		final Box green = new Box(show, 20, 20, 50, 50);
		green.setBackground("yellow");
		green.setBorder("5px solid green");

		final Box blue = new Box(show, 20, 20, 50, 50);
		blue.setBackground("cyan");
		blue.setBorder("5px solid blue");

		final Assembly assembly = new Assembly(show);
		assembly.add(red);
		assembly.add(green);
		assembly.add(blue);

		// we use a timer to switch the active assembly feature
		Timer timer = new Timer(show, 25, new Command[] { new Command() {
			@Override
			public void execute() {
				Feature part = assembly.getCurrentPart();
				if (part == red) {
					assembly.setCurrentPart(green);
				} else if (part == green) {
					assembly.setCurrentPart(blue);
				} else {
					assembly.setCurrentPart(red);
				}
			}
		} });

		Translator translator = new Translator(show,
				MyTranslatorModel.INSTANCE.createModel());
		translator.setPart(assembly);

		Segment s = new Segment(show);
		s.add(translator);
		s.add(timer);

		show.activateSegment(s);

		return show;
	}

	@GrinFile(value = "translator_model.txt")
	interface MyTranslatorModel extends InterpolatedModelParser {
		MyTranslatorModel INSTANCE = GWT.create(MyTranslatorModel.class);
	};
}
}}}

== Container ==

A [http://code.google.com/p/gwt-mosaic/source/browse/trunk/src/org/gwt/mosaic2g/client/scene/Container.java Container] is the base class of all layout managers like: HBox, VBox, Grid and Stack.




<wiki:gadget url="http://mosaic.arkasoft.com/gwt-mosaic-wiki.xml?v=3" height="95" width="728" border="0"/>