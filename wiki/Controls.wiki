#sidebar TableOfContents

= Introduction =

A [http://code.google.com/p/gwt-mosaic/source/browse/trunk/src/org/gwt/mosaic2g/client/scene/Control.java Control] feature has a visual representation. A control in general can wrap any GWT Widget and it can be also used in combination with UiBinder.

= Details =

The primitive set of controls are:
  * [http://code.google.com/p/gwt-mosaic/source/browse/trunk/src/org/gwt/mosaic2g/client/scene/control/Box.java Box] - displays a rectangular box.
  * [http://code.google.com/p/gwt-mosaic/source/browse/trunk/src/org/gwt/mosaic2g/client/scene/control/Text.java Text] - feature lets you display text or html.
  * [http://code.google.com/p/gwt-mosaic/source/browse/trunk/src/org/gwt/mosaic2g/client/scene/control/Image.java Image] - feature displays a single image using an url.
  * ImageSequence - like an image node, except that it has a sequence of images that are shown, one per frame. This allows one to produce a cel animation. An image sequence can repeat, starting with any frame of the animation.

== Using UiBinder ==

http://gwt-mosaic.googlecode.com/svn/wiki/2g/controls1.png

The code:

{{{
import org.gwt.mosaic2g.client.animator.AnimationClient;
import org.gwt.mosaic2g.client.animator.AnimationEngine;
import org.gwt.mosaic2g.client.scene.Control;
import org.gwt.mosaic2g.client.scene.Scene;
import org.gwt.mosaic2g.client.scene.Segment;
import org.gwt.mosaic2g.client.scene.Show;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiTemplate;
import com.google.gwt.user.client.Command;
import com.google.gwt.user.client.DeferredCommand;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.PasswordTextBox;
import com.google.gwt.user.client.ui.RootLayoutPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.Widget;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Showcase implements EntryPoint {
	private Scene scene;

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		RootLayoutPanel.get().add(scene = new Scene());
		scene.setShow(createShow());

		final AnimationEngine animationEngine = new AnimationEngine(
				new AnimationClient[] { scene });
		DeferredCommand.addCommand(new Command() {
			public void execute() {
				animationEngine.start();
			}
		});
	}

	private Show createShow() {
		Show show = new Show();

		Control loginForm = new Control(show, 20, 20) {
			@Override
			protected Widget createWidget() {
				LoginForm loginForm = new LoginForm();
				updateWidget(loginForm, true);
				return loginForm;
			}
		};
		loginForm.setStyleName("loginForm");

		Segment s = new Segment(show);
		s.add(loginForm);

		show.activateSegment(s);

		return show;
	}
	
	// === UiBinder related things ===
	
	@UiTemplate(value="LoginForm.ui.xml")
	interface LoginFormBinder extends UiBinder<Widget, LoginForm> {
		LoginFormBinder UIBINDER = GWT.create(LoginFormBinder.class);
	}
	
	public class LoginForm extends Composite {

		@UiField
		TextBox userName;

		@UiField
		PasswordTextBox password;

		@UiField
		Button submitBtn;

		public LoginForm() {
			initWidget(LoginFormBinder.UIBINDER.createAndBindUi(this));
		}
	}

}
}}}

The `LoginForm.ui.xml` file:

{{{
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
	xmlns:g='urn:import:com.google.gwt.user.client.ui' 
	xmlns:mail='urn:import:com.google.gwt.sample.mail.client'>

	<ui:style>
	.panel {
		padding: 2em 3em;
	}
	.input {
		width: 100%;
	}
	</ui:style>
	
	<g:HTMLPanel width='20em' styleName='{style.panel}'>
		<table width='100%' cellspacing='0' cellpadding='5'>
			<tr>
				<td>Username:</td>
				<td><g:TextBox styleName='{style.input}' ui:field='userName'/></td>
			</tr>
			<tr>
				<td>Password:</td>
				<td><g:PasswordTextBox styleName='{style.input}' ui:field='password'/></td>
			</tr>
			<tr>
				<td></td>
				<td><g:Button text='Submit' ui:field='submitBtn'/></td>
			</tr>
		</table>
	</g:HTMLPanel>

</ui:UiBinder>
}}}

and the CSS used:

{{{
.loginForm {
    background: white !important;
    background: -moz-linear-gradient(top, white, lightGray) !important;
    background: -webkit-gradient(linear, left top, left bottom, from(white), to(lightGray)) !important;
    border: 2px solid lightGray !important;
    -moz-border-radius: 1em; 
    -webkit-border-radius: 1em;
    border-radius: 1em;
    -moz-box-shadow: 0.5em 0.5em 0.5em #4d4d4d;
    -webkit-box-shadow: 0.5em 0.5em 0.5em #4d4d4d;
    box-shadow: 0.5em 0.5em 0.5em #4d4d4d;
}
}}}