#summary WindowPanel tutorial.

= Introduction =

A WindowPanel is a GWT PopupPanel that has decorations such as a border, a title, and supports image buttons that close or maximize the window. 

= Creating and showing window panels =

== Simple WindowPanel Example ==

This WindowPanel example displays an untitled WindowPanel containing a label. The WindowPanel would be displayed in the upper left of the browser's content area (it can be displayed in other parts of the browser's content area, as shown in a later example).

{{{
import org.gwt.mosaic.ui.client.WindowPanel;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private void createWindowPanel() {
    WindowPanel w = new WindowPanel();
    w.setWidget(new Label("bonbon"));
    w.setPixelSize(100, 100);
    w.show();
  }

  public void onModuleLoad() {
    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
      }
    }));
  }

}
}}}

 * `WindowPanel w = new WindowPanel()` This constructs a WindowPanel, which is a popup panel that can contain widgets you choose to put in it. At this stage of execution the WindowPanel is not yet visible to the user.
 * `w.setWidget(new Label("bonbon"))` This statement adds a label to the WindowPanel.
 * `w.setPixelSize(100, 100)` This statement sets the size of the WindowPanel.
 * `w.show()` This statement makes the WindowPanel visible.

== LayoutManager Example ==

This WindowPanel example shows a WindowPanel containing two labels. It demonstrates the BorderLayout layout manager that the LayoutPanel is set to. WindowPanel is using by default the a FillLayout layout manager which will cause the LayoutPanel to use all of the available space.

If you dragged a corner of the WindowPanel to enlarge it, you would see that the layout manager arranges the labels in their appropriate place i.e. at the NORTH and SOUTH positions of the WindowPanel.

{{{
import org.gwt.mosaic.ui.client.WindowPanel;
import org.gwt.mosaic.ui.client.layout.BorderLayout;
import org.gwt.mosaic.ui.client.layout.BorderLayoutData;
import org.gwt.mosaic.ui.client.layout.LayoutPanel;
import org.gwt.mosaic.ui.client.layout.BorderLayout.Region;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private void createWindowPanel() {
    WindowPanel w = new WindowPanel("Dairy Products");

    LayoutPanel panel = new LayoutPanel(new BorderLayout());
    panel.add(new Label("Sour Cream"), new BorderLayoutData(Region.NORTH));
    panel.add(new Label("Creme Fraiche"), new BorderLayoutData(Region.SOUTH));
    panel.add(new Label()); // add empty label at Region.CENTER
    w.setWidget(panel);

    w.pack();
    w.show();
  }

  public void onModuleLoad() {
    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
      }
    }));
  }

}
}}}