#summary WindowPanel tutorial.
#labels Featured

= NOTE: This tutorial is valid only for SVN trunk version, not for current (0.1.8) =

= Introduction =

A WindowPanel is a GWT PopupPanel that has decorations such as a border, a title, and supports image buttons that close or maximize the window. 

= Creating and showing window panels =

== Simple WindowPanel Example ==

This WindowPanel example displays an untitled WindowPanel containing a label. The WindowPanel would be displayed in the upper left of the browser's content area (it can be displayed in other parts of the browser's content area, as shown in a later example).

{{{
import org.gwt.mosaic.ui.client.Label;
import org.gwt.mosaic.ui.client.WindowPanel;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private void createWindowPanel() {
    WindowPanel w = new WindowPanel();
    w.setWidget(new Label("bonbon"));
    w.setPixelSize(100, 100);
    w.show();
  }

  public void onModuleLoad() {
    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
      }
    }));
  }

}
}}}

 * `WindowPanel w = new WindowPanel()` This constructs a WindowPanel, which is a popup panel that can contain widgets you choose to put in it. At this stage of execution the WindowPanel is not yet visible to the user.
 * `w.setWidget(new Label("bonbon"))` This statement adds a label to the WindowPanel.
 * `w.setPixelSize(100, 100)` This statement sets the size of the WindowPanel.
 * `w.show()` This statement makes the WindowPanel visible.

== LayoutManager Example ==

This WindowPanel example shows a WindowPanel containing two labels. It demonstrates the BorderLayout layout manager that the LayoutPanel is set to. WindowPanel is using by default the a FillLayout layout manager which will cause the LayoutPanel to use all of the available space.

If you dragged a corner of the WindowPanel to enlarge it, you would see that the layout manager arranges the labels in their appropriate place i.e. at the NORTH and SOUTH positions of the WindowPanel.

{{{
import org.gwt.mosaic.ui.client.Label;
import org.gwt.mosaic.ui.client.WindowPanel;
import org.gwt.mosaic.ui.client.layout.BorderLayout;
import org.gwt.mosaic.ui.client.layout.BorderLayoutData;
import org.gwt.mosaic.ui.client.layout.LayoutPanel;
import org.gwt.mosaic.ui.client.layout.BorderLayout.Region;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private void createWindowPanel() {
    WindowPanel w = new WindowPanel("Dairy Products");

    LayoutPanel panel = new LayoutPanel(new BorderLayout());
    panel.add(new Label("Sour Cream"), new BorderLayoutData(Region.NORTH));
    panel.add(new Label("Creme Fraiche"), new BorderLayoutData(Region.SOUTH));
    w.setWidget(panel);

    w.pack();
  }

  public void onModuleLoad() {
    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
      }
    }));
  }

}
}}}

 * `w.pack()` The `pack` method sizes the WindowPanel, by using the layout manager, so that all its contents are at or above their preferred sizes. In general, using `pack` is preferable to calling any other sizing method.

== Centered Example ==

This WindowPanel example displays a WindowPanel with a LayoutPanel containg labels. It uses the WindowPanel.center() method to get the WindowPanel centered on the screen.

{{{
import org.gwt.mosaic.ui.client.Label;
import org.gwt.mosaic.ui.client.WindowPanel;
import org.gwt.mosaic.ui.client.layout.BoxLayout;
import org.gwt.mosaic.ui.client.layout.LayoutPanel;
import org.gwt.mosaic.ui.client.layout.BoxLayout.Orientation;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private void createWindowPanel() {
    WindowPanel w = new WindowPanel("Desserts");

    LayoutPanel panel = new LayoutPanel(new BoxLayout(Orientation.VERTICAL));
    panel.add(new Label("Jelly"));
    panel.add(new Label("Baklava"));
    panel.add(new Label("Tiramisu"));
    panel.add(new Label("Pavlova"));
    panel.add(new Label("Kulfi"));
    w.setWidget(panel);

    w.pack();
    w.center();
  }

  public void onModuleLoad() {
    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
      }
    }));
  }

}
}}}

== WindowPanel and LayoutPopupPanel Example ==

This example displays a WindowPanel and a LayoutPopupPanel. The LayoutPopupPanel does not have a title bar, window-management buttons, or other trimmings associated with the WindowPanel but it can be displayed anywhere on the browser's content area.

Note: DecoratedLayoutPopupPanel, the base class of WindowPanel, is like LayoutPopupPanel but with a DecoratorPanel.

{{{
import org.gwt.mosaic.ui.client.Label;
import org.gwt.mosaic.ui.client.LayoutPopupPanel;
import org.gwt.mosaic.ui.client.WindowPanel;
import org.gwt.mosaic.ui.client.layout.BoxLayout;
import org.gwt.mosaic.ui.client.layout.LayoutPanel;
import org.gwt.mosaic.ui.client.layout.BoxLayout.Orientation;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private void createWindowPanel() {
    WindowPanel w = new WindowPanel("Desserts");

    LayoutPanel panel = new LayoutPanel(new BoxLayout(Orientation.VERTICAL));
    panel.add(new Label("Jelly"));
    panel.add(new Label("Baklava"));
    panel.add(new Label("Tiramisu"));
    panel.add(new Label("Pavlova"));
    panel.add(new Label("Kulfi"));
    w.setWidget(panel);

    w.pack();
  }

  private void createLayoutPopupPanel() {
    LayoutPopupPanel lp = new LayoutPopupPanel();

    LayoutPanel panel = new LayoutPanel(new BoxLayout(Orientation.VERTICAL));
    panel.add(new Label("Jelly"));
    panel.add(new Label("Baklava"));
    panel.add(new Label("Tiramisu"));
    panel.add(new Label("Pavlova"));
    panel.add(new Label("Kulfi"));
    lp.setWidget(panel);

    lp.pack();
    lp.center();
  }

  public void onModuleLoad() {
    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
        createLayoutPopupPanel();
      }
    }));
  }

}
}}}

= Specifying WindowPanel Icons and Buttons =

{{{
import org.gwt.mosaic.ui.client.Caption;
import org.gwt.mosaic.ui.client.ImageButton;
import org.gwt.mosaic.ui.client.Label;
import org.gwt.mosaic.ui.client.WindowPanel;
import org.gwt.mosaic.ui.client.Caption.CaptionRegion;
import org.gwt.mosaic.ui.client.WindowPanel.WindowState;
import org.gwt.mosaic.ui.client.WindowPanel.WindowStateListener;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private void createWindowPanel() {
    WindowPanel w = new WindowPanel("My Frame");
    
    w.getHeader().add(Caption.IMAGES.gwtMosaicLogo().createImage());
    
    addMaximizeButton(w, CaptionRegion.RIGHT);
    addMinimizeButton(w, CaptionRegion.RIGHT);
    
    w.setWidget(new Label("bonbon"));
    
    w.pack();
    w.center();
  }
  
  private void addMaximizeButton(final WindowPanel windowPanel,
      CaptionRegion captionRegion) {
    final ImageButton maximizeBtn = new ImageButton(
        Caption.IMAGES.windowMaximize());
    maximizeBtn.addClickListener(new ClickListener() {
      public void onClick(Widget sender) {
        if (windowPanel.getWindowState() == WindowState.MAXIMIZED) {
          windowPanel.setWindowState(WindowState.NORMAL);
        } else {
          windowPanel.setWindowState(WindowState.MAXIMIZED);
        }
      }
    });
    windowPanel.addWindowStateListener(new WindowStateListener() {
      public void onWindowStateChange(WindowPanel sender) {
        if (sender.getWindowState() == WindowState.MAXIMIZED) {
          maximizeBtn.setImage(Caption.IMAGES.windowRestore().createImage());
        } else {
          maximizeBtn.setImage(Caption.IMAGES.windowMaximize().createImage());
        }

      }
    });
    windowPanel.getHeader().add(maximizeBtn, captionRegion);
  }
  
  private void addMinimizeButton(final WindowPanel windowPanel,
      CaptionRegion captionRegion) {
    final ImageButton minimizeBtn = new ImageButton(
        Caption.IMAGES.windowMinimize());
    minimizeBtn.addClickListener(new ClickListener() {
      public void onClick(Widget sender) {
        windowPanel.setWindowState(WindowState.MINIMIZED);
      }
    });
    windowPanel.getHeader().add(minimizeBtn, captionRegion);
  }

  public void onModuleLoad() {
    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
      }
    }));
  }

}
}}}

= Responding to WindowPanel-Closing Events =

{{{
import org.gwt.mosaic.ui.client.InfoPanel;
import org.gwt.mosaic.ui.client.Label;
import org.gwt.mosaic.ui.client.WindowPanel;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.WindowCloseListener;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private void createWindowPanel() {
    final WindowPanel w = new WindowPanel("My Frame");

    w.addWindowCloseListener(new WindowCloseListener() {
      public void onWindowClosed() {
        InfoPanel.show(w.getCaption(), "onWindowClosed()");
      }

      public String onWindowClosing() {
        return "Are you sure you want to close this WindowPanel?";
      }
    });

    w.setWidget(new Label("bonbon"));

    w.pack();
    w.center();
  }

  public void onModuleLoad() {
    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
      }
    }));
  }

}
}}}

= Using an AbsolutePanel as Boundary Panel =

{{{
import org.gwt.mosaic.ui.client.Caption;
import org.gwt.mosaic.ui.client.ImageButton;
import org.gwt.mosaic.ui.client.Label;
import org.gwt.mosaic.ui.client.WindowPanel;
import org.gwt.mosaic.ui.client.Caption.CaptionRegion;
import org.gwt.mosaic.ui.client.WindowPanel.WindowState;
import org.gwt.mosaic.ui.client.WindowPanel.WindowStateListener;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

public class Main implements EntryPoint {

  private AbsolutePanel boundaryPanel;

  class MyWindowPanel extends WindowPanel {
    public MyWindowPanel(AbsolutePanel boundaryPanel, String caption) {
      super(boundaryPanel, caption, true, false);
      addMaximizeButton(this, CaptionRegion.RIGHT);
    }
  }

  private void createWindowPanel() {
    MyWindowPanel w = new MyWindowPanel(boundaryPanel, "My Frame");
    w.setWidget(new Label("bonbon"));
    w.pack();
  }
  

  private void addMaximizeButton(final WindowPanel windowPanel,
      CaptionRegion captionRegion) {
    final ImageButton maximizeBtn = new ImageButton(
        Caption.IMAGES.windowMaximize());
    maximizeBtn.addClickListener(new ClickListener() {
      public void onClick(Widget sender) {
        if (windowPanel.getWindowState() == WindowState.MAXIMIZED) {
          windowPanel.setWindowState(WindowState.NORMAL);
        } else {
          windowPanel.setWindowState(WindowState.MAXIMIZED);
        }
      }
    });
    windowPanel.addWindowStateListener(new WindowStateListener() {
      public void onWindowStateChange(WindowPanel sender) {
        if (sender.getWindowState() == WindowState.MAXIMIZED) {
          maximizeBtn.setImage(Caption.IMAGES.windowRestore().createImage());
        } else {
          maximizeBtn.setImage(Caption.IMAGES.windowMaximize().createImage());
        }

      }
    });
    windowPanel.getHeader().add(maximizeBtn, captionRegion);
  }


  public void onModuleLoad() {
    boundaryPanel = new AbsolutePanel();
    boundaryPanel.setPixelSize(512, 256);
    boundaryPanel.getElement().getStyle().setProperty("border",
        "1px dotted #f00");
    RootPanel.get().add(boundaryPanel, 10, 50);

    RootPanel.get().add(new Button("Create WindowPanel", new ClickListener() {
      public void onClick(Widget sender) {
        createWindowPanel();
      }
    }));
  }

}
}}}