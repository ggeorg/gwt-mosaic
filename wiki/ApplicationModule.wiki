#summary One-sentence summary of this page.

= Introduction =

The application module provides a simple framework for building GWT based applications. It is a small set of Java classes that provides infrastructure that's common to most GWT applications:

 * Management of application life-cycle, startup and shutdown
 * Support for loading localized resources, like strings, messages (TODO) and images
 * Support for loosely coupling Actions to their presentation

= Application module examples =

This section provides a series of examples that incrementally expose many of the most important aspects of the API.

== Hello World based on {{{Application}}} ==

To write an application, you need to do just a few things:

 * Make your {{{EntryPoint}}} class to extend the {{{Application}}} class and override its {{{startup}}} method. Your {{{startup}}} method should create and show the application's initial GUI.
 * In your {{{Entrypoint}}} {{{onLoad}}} method, call the static {{{Application.launch}}} method. This initializes the application module.

The following example does just that.

{{{
import org.gwt.mosaic.application.client.Application;
import org.gwt.mosaic.ui.client.Viewport;
import org.gwt.mosaic.ui.client.layout.BorderLayout;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Button;

public class Test extends Application implements EntryPoint {

  public void onModuleLoad() {
    Application.launch(this);
  }

  @Override
  protected void startup() {
    Button btn = new Button("Hello World", new ClickHandler() {
      public void onClick(ClickEvent event) {
        Window.alert("Thank you!");
      }
    });

    Viewport viewport = new Viewport(new BorderLayout());
    viewport.getLayoutPanel().add(btn);
    viewport.attach();
  }
}
}}}

If you run {{{Test}}} class you'll see something like this:

http://gwt-mosaic.googlecode.com/svn/wiki/app-example1.png

There is still a lot of ({{{Viewport}}}) boilerplate here, because {{{Application}}} base class can't assume very much about how the application's GUI is structured. The next example shows how to write the same thing more simply, by using a class that extends {{{Application}}} called {{{SingleFrameApplication}}}.

== Hello World based on {{{SingleFrameApplication}}} ==

To create an application based on {{{Viewport}}}, extend the {{{SingleFrameApplication}}} class. Your application's subclass should override {{{startup}}} to create the application's main GUI panel and then call {{{show}}} to create, configure, and show a {{{Viewport}}} that contains the panel.

{{{
import org.gwt.mosaic.application.client.Application;
import org.gwt.mosaic.application.client.SingleFrameApplication;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Button;

public class Test extends SingleFrameApplication implements EntryPoint {

  public void onModuleLoad() {
    Application.launch(this);
  }

  @Override
  protected void startup() {
    Button btn = new Button("Hello World", new ClickHandler() {
      public void onClick(ClickEvent event) {
        Window.alert("Thank you!");
      }
    });

    show(btn);
  }
}
}}}