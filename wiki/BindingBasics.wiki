#summary The evolution of binding in GWTMosaic 2g.
#sidebar TableOfContents

= Introduction =

With binding you can easily synchornize an application's graphical user interface (GUI) with its underlying data.


= Details =

The basic concepts can be demonstrated with just two variables. In the following variable `a` is bound to variable `b`. Whenever the value of `a` changes, the value of `b` automatically changes as well:

{{{
import org.gwt.mosaic2g.binding.client.Property;

public class Main {
	public static void main(String[] args) {
		Property<String> a = Property.valueOf("Hello");
		Property<String> b = a.createBinding();
		System.out.println("a: " + a + ", b: " + b);
		a.$("Good-Bye");
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

Output:
{{{
a: Hello, b: Hello
a: Good-Bye, b: Good-Bye
}}}

In this example, both variables are strings, but binding works with other data types as weel:
{{{
import org.gwt.mosaic2g.binding.client.Property;

public class Main {
	public static void main(String[] args) {
		Property<Integer> a = Property.valueOf(10);
		Property<Integer> b = a.createBinding();
		System.out.println("a: " + a + ", b: " + b);
		a.$(20);
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

Output:
{{{
a: 10, b: 10
a: 20, b: 20
}}}

In fact, you can bind to an entire expresseion, and it will still work:

{{{
import org.gwt.mosaic2g.binding.client.Getter;
import org.gwt.mosaic2g.binding.client.Property;

public class Main {
	public static void main(String[] args) {
		Property<Integer> a = Property.valueOf(10);
		Property<Integer> b = a.createBinding(new Getter<Integer>() {
			public Integer get(Integer value) {
				return value + 10;
			}
		});
		System.out.println("a: " + a + ", b: " + b);
		a.$(20);
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

Output:

{{{
a: 10, b: 20
a: 20, b: 30
}}}