#summary The evolution of binding in GWT Mosaic 2g.
#sidebar TableOfContents

= Introduction =

With binding you can easily synchornize an application's graphical user interface (GUI) with its underlying data.


= Details =

The basic concepts can be demonstrated with just two variables. In the following variable `a` is bound to variable `b`. Whenever the value of `a` changes, the value of `b` automatically changes as well:

{{{
import org.gwt.mosaic2g.binding.client.Property;

public class Main {
	public static void main(String[] args) {
		Property<String> a = Property.valueOf("Hello");
		Property<String> b = a.createBinding();
		System.out.println("a: " + a + ", b: " + b);
		a.$("Good-Bye");
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

Output:
{{{
a: Hello, b: Hello
a: Good-Bye, b: Good-Bye
}}}

In this example, both variables are strings, but binding works with other data types as weel:
{{{
import org.gwt.mosaic2g.binding.client.Property;

public class Main {
	public static void main(String[] args) {
		Property<Integer> a = Property.valueOf(10);
		Property<Integer> b = a.createBinding();
		System.out.println("a: " + a + ", b: " + b);
		a.$(20);
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

Output:
{{{
a: 10, b: 10
a: 20, b: 20
}}}

In fact, you can bind to an entire expresseion, and it will still work:

{{{
import org.gwt.mosaic2g.binding.client.Getter;
import org.gwt.mosaic2g.binding.client.Property;

public class Main {
	public static void main(String[] args) {
		Property<Integer> a = Property.valueOf(10);
		Property<Integer> b = a.createBinding(new Getter<Integer>() {
			public Integer get(Integer value) {
				return value + 10;
			}
		});
		System.out.println("a: " + a + ", b: " + b);
		a.$(20);
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

Output:

{{{
a: 10, b: 20
a: 20, b: 30
}}}

== Using event handlers ==

{{{
import org.gwt.mosaic2g.binding.client.Getter;
import org.gwt.mosaic2g.binding.client.Property;

import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;

public class Main {
	public static void main(String[] args) {
		Property<Integer> a = Property.valueOf(10);
		Property<Integer> b = a.createBinding(new Getter<Integer>() {
			public Integer get(Integer value) {
				return value + 10;
			}
		});

		a.addValueChangeHandler(new ValueChangeHandler<Integer>() {
			public void onValueChange(ValueChangeEvent<Integer> event) {
				System.out.println(event.getSource() + ": " + event.getValue());
			}
		});
		
		b.addValueChangeHandler(new ValueChangeHandler<Integer>() {
			public void onValueChange(ValueChangeEvent<Integer> event) {
				System.out.println(event.getSource() + ": " + event.getValue());
			}
		});

		System.out.println("a: " + a + ", b: " + b);
		a.$(20);
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

Output:

{{{
a: 10, b: 20
org.gwt.mosaic2g.binding.client.Property$1@4318f375: 20
org.gwt.mosaic2g.binding.client.Property$1@4318f375: 20
a: 20, b: 30
}}}

Note that the value in both event handlers is 20. This is because the event handlers are used internally to notify about value changes and runs before the `Getter` expression. In case we want to get the correct value of `b` with an event handler we have to change our code to:

{{{
import org.gwt.mosaic2g.binding.client.Getter;
import org.gwt.mosaic2g.binding.client.Property;

import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;

public class Main {
	public static void main(String[] args) {
		final Property<Integer> a = Property.valueOf(10);
		final Property<Integer> b = a.createBinding(new Getter<Integer>() {
			public Integer get(Integer value) {
				return value + 10;
			}
		});

		a.addValueChangeHandler(new ValueChangeHandler<Integer>() {
			public void onValueChange(ValueChangeEvent<Integer> event) {
				System.out.println(event.getSource() + ": " + event.getValue());
			}
		});
		
		b.addValueChangeHandler(new ValueChangeHandler<Integer>() {
			public void onValueChange(ValueChangeEvent<Integer> event) {
				System.out.println(event.getSource() + ": " + b.$());
			}
		});

		System.out.println("a: " + a + ", b: " + b);
		a.$(20);
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

{{{
a: 10, b: 20
org.gwt.mosaic2g.binding.client.Property$1@41fae3c6: 20
org.gwt.mosaic2g.binding.client.Property$1@41fae3c6: 30
a: 20, b: 30
}}}

== Using an expression for setting a value ==

In the previous example, if you try to set the value of `b`, you will get:

{{{
Exception in thread "main" java.lang.UnsupportedOperationException: Property is read-only.
	at org.gwt.mosaic2g.binding.client.Property$5.set(Property.java:182)
	at org.gwt.mosaic2g.binding.client.Property.$(Property.java:116)
	at org.gwt.mosaic2g.client.Main.main(Main.java:32)
a: 10, b: 20
}}}

Rule: since we use a custom `Getter` we have to use a custom `Setter`; if not our binding strategy will be read-only:

{{{
import org.gwt.mosaic2g.binding.client.Getter;
import org.gwt.mosaic2g.binding.client.Property;
import org.gwt.mosaic2g.binding.client.Setter;

import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;

public class Main {
	public static void main(String[] args) {
		final Property<Integer> a = Property.valueOf(10);
		final Property<Integer> b = a.createBinding(new Getter<Integer>() {
			public Integer get(Integer value) {
				return value + 10;
			}
		}, new Setter<Integer>() {
			public Integer set(Integer value) {
				return value - 5;
			}
		});

		a.addValueChangeHandler(new ValueChangeHandler<Integer>() {
			public void onValueChange(ValueChangeEvent<Integer> event) {
				System.out.println(event.getSource() + ": " + event.getValue());
			}
		});

		b.addValueChangeHandler(new ValueChangeHandler<Integer>() {
			public void onValueChange(ValueChangeEvent<Integer> event) {
				System.out.println(event.getSource() + ": " + event.getValue());
			}
		});

		System.out.println("a: " + a + ", b: " + b);
		b.$(30);
		System.out.println("a: " + a + ", b: " + b);
	}
}
}}}

Output:

{{{
a: 10, b: 20
org.gwt.mosaic2g.binding.client.Property$1@44fd13b5: 25
org.gwt.mosaic2g.binding.client.Property$1@44fd13b5: 25
a: 25, b: 35
}}}

_Note that the value change event is fired first again from `a`._